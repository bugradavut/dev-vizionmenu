"use client"

import React, { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import { Separator } from '@/components/ui/separator'
import { Badge } from '@/components/ui/badge'
// import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
// import { Label } from '@/components/ui/label'  
// import { Checkbox } from '@/components/ui/checkbox'
import { Calendar, Clock, Settings, AlertCircle, CheckCircle, Repeat, Star, Calendar as CalendarIcon } from 'lucide-react'
import { useLanguage } from '@/contexts/language-context'
import { menuService, type CreatePresetRequest, type MenuPreset } from '@/services/menu.service'

// Form schema - simplified version first
const presetFormSchema = z.object({
  name: z.string().min(1, 'Preset name is required').max(100, 'Name must be 100 characters or less'),
  description: z.string().max(500, 'Description must be 500 characters or less').optional(),
  capture_current_menu: z.boolean(),
  schedule_start: z.string().optional(),
  schedule_end: z.string().optional(),
  enable_scheduling: z.boolean(),
})

type PresetFormData = z.infer<typeof presetFormSchema>

interface PresetCreateModalProps {
  isOpen: boolean
  onClose: () => void
  onPresetCreated: (preset: MenuPreset) => void
}

export function PresetCreateModal({ isOpen, onClose, onPresetCreated }: PresetCreateModalProps) {
  const { language } = useLanguage()
  
  const [isCreating, setIsCreating] = useState(false)

  const form = useForm<PresetFormData>({
    resolver: zodResolver(presetFormSchema),
    defaultValues: {
      name: '',
      description: '',
      capture_current_menu: true,
      schedule_start: '',
      schedule_end: '',
      enable_scheduling: false,
    },
  })

  const watchEnableScheduling = form.watch('enable_scheduling')

  // Handle form submission
  const onSubmit = async (data: PresetFormData) => {
    try {
      setIsCreating(true)

      const createData: CreatePresetRequest = {
        name: data.name,
        description: data.description || undefined,
        capture_current_menu: data.capture_current_menu,
      }

      // Add scheduling if enabled
      if (data.enable_scheduling) {
        if (data.schedule_start) {
          createData.schedule_start = data.schedule_start
        }
        if (data.schedule_end) {
          createData.schedule_end = data.schedule_end
        }
      }

      const response = await menuService.createPreset(createData)
      
      if (response.data) {
        onPresetCreated(response.data)
        form.reset()
        onClose()
        // TODO: Show success toast
        console.log('Preset created successfully:', response.data)
      }
    } catch (error) {
      console.error('Failed to create preset:', error)
      // TODO: Show error toast
    } finally {
      setIsCreating(false)
    }
  }

  // Handle modal close
  const handleClose = () => {
    form.reset()
    onClose()
  }

  // Get current date/time for min values
  const now = new Date()
  const minDateTime = now.toISOString().slice(0, 16) // YYYY-MM-DDTHH:MM format

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5 text-purple-600" />
            {language === 'fr' ? 'Créer un nouveau preset' : 'Create New Preset'}
          </DialogTitle>
          <DialogDescription>
            {language === 'fr' 
              ? 'Créez un preset de menu pour basculer rapidement entre différentes configurations.'
              : 'Create a menu preset to quickly switch between different menu configurations.'
            }
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* Basic Information */}
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <h3 className="text-sm font-medium">
                  {language === 'fr' ? 'Informations de base' : 'Basic Information'}
                </h3>
              </div>
              
              {/* Preset Type Selection - Critical for restaurant operations */}
              <FormField
                control={form.control}
                name="preset_type"
                render={({ field }) => (
                  <FormItem className="space-y-3">
                    <FormLabel className="text-base font-medium">
                      {language === 'fr' ? 'Type de preset' : 'Preset Type'}
                    </FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        value={field.value}
                        className="grid grid-cols-1 gap-3"
                      >
                        <div className="flex items-center space-x-3 rounded-lg border p-3 hover:bg-muted/50">
                          <RadioGroupItem value="time_based" id="time_based" />
                          <Label htmlFor="time_based" className="flex-1 cursor-pointer">
                            <div className="flex items-center gap-2">
                              <Clock className="h-4 w-4 text-blue-600" />
                              <div>
                                <div className="font-medium">
                                  {language === 'fr' ? 'Basé sur l\'heure' : 'Time-Based'}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {language === 'fr' 
                                    ? 'Pour les menus petit-déjeuner, déjeuner, dîner'
                                    : 'For breakfast, lunch, dinner menus'
                                  }
                                </div>
                              </div>
                            </div>
                          </Label>
                        </div>
                        
                        <div className="flex items-center space-x-3 rounded-lg border p-3 hover:bg-muted/50">
                          <RadioGroupItem value="seasonal" id="seasonal" />
                          <Label htmlFor="seasonal" className="flex-1 cursor-pointer">
                            <div className="flex items-center gap-2">
                              <CalendarIcon className="h-4 w-4 text-green-600" />
                              <div>
                                <div className="font-medium">
                                  {language === 'fr' ? 'Saisonnier' : 'Seasonal'}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {language === 'fr' 
                                    ? 'Pour les menus printemps, été, automne, hiver'
                                    : 'For spring, summer, fall, winter menus'
                                  }
                                </div>
                              </div>
                            </div>
                          </Label>
                        </div>
                        
                        <div className="flex items-center space-x-3 rounded-lg border p-3 hover:bg-muted/50">
                          <RadioGroupItem value="special_event" id="special_event" />
                          <Label htmlFor="special_event" className="flex-1 cursor-pointer">
                            <div className="flex items-center gap-2">
                              <Star className="h-4 w-4 text-purple-600" />
                              <div>
                                <div className="font-medium">
                                  {language === 'fr' ? 'Événement spécial' : 'Special Event'}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {language === 'fr' 
                                    ? 'Pour Noël, Saint-Valentin, fêtes'
                                    : 'For holidays, Valentine\'s Day, special occasions'
                                  }
                                </div>
                              </div>
                            </div>
                          </Label>
                        </div>
                        
                        <div className="flex items-center space-x-3 rounded-lg border p-3 hover:bg-muted/50">
                          <RadioGroupItem value="manual" id="manual" />
                          <Label htmlFor="manual" className="flex-1 cursor-pointer">
                            <div className="flex items-center gap-2">
                              <Settings className="h-4 w-4 text-gray-600" />
                              <div>
                                <div className="font-medium">
                                  {language === 'fr' ? 'Manuel uniquement' : 'Manual Only'}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {language === 'fr' 
                                    ? 'Activation manuelle, pas de planification'
                                    : 'Manual activation, no scheduling'
                                  }
                                </div>
                              </div>
                            </div>
                          </Label>
                        </div>
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>
                      {language === 'fr' ? 'Nom du preset' : 'Preset Name'}
                    </FormLabel>
                    <FormControl>
                      <Input 
                        placeholder={language === 'fr' ? 'ex: Menu du petit-déjeuner' : 'e.g., Breakfast Menu'}
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>
                      {language === 'fr' ? 'Description' : 'Description'} 
                      <span className="text-muted-foreground ml-1">
                        ({language === 'fr' ? 'optionnel' : 'optional'})
                      </span>
                    </FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder={language === 'fr' 
                          ? 'Décrivez quand et comment ce preset sera utilisé...'
                          : 'Describe when and how this preset will be used...'
                        }
                        className="resize-none"
                        rows={3}
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Menu Capture Options */}
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <h4 className="text-sm font-medium">
                    {language === 'fr' ? 'Options de capture du menu' : 'Menu Capture Options'}
                  </h4>
                </div>
                
                <FormField
                  control={form.control}
                  name="capture_current_menu"
                  render={({ field }) => (
                    <FormItem className="flex items-center justify-between rounded-lg border p-4">
                      <div className="space-y-0.5">
                        <FormLabel className="text-base">
                          {language === 'fr' ? 'Capturer le menu actuel' : 'Capture Current Menu'}
                        </FormLabel>
                        <FormDescription>
                          {language === 'fr' 
                            ? 'Sauvegarder l\'état complet du menu actuel'
                            : 'Save the complete state of your current menu'
                          }
                        </FormDescription>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />

                {/* Advanced Capture Options - Show only if capture is enabled */}
                {watchCaptureCurrentMenu && (
                  <div className="pl-4 space-y-3 border-l-2 border-green-200">
                    <p className="text-xs text-muted-foreground">
                      {language === 'fr' 
                        ? 'Sélectionnez ce qui sera inclus dans ce preset:'
                        : 'Select what will be included in this preset:'
                      }
                    </p>
                    
                    <div className="grid grid-cols-1 gap-3">
                      <FormField
                        control={form.control}
                        name="capture_categories"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-sm">
                                {language === 'fr' ? 'Statut des catégories' : 'Category Status'}
                              </FormLabel>
                              <FormDescription>
                                {language === 'fr' 
                                  ? 'Inclure l\'état actif/inactif des catégories'
                                  : 'Include active/inactive status of categories'
                                }
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="capture_items"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-sm">
                                {language === 'fr' ? 'Statut des articles' : 'Item Status'}
                              </FormLabel>
                              <FormDescription>
                                {language === 'fr' 
                                  ? 'Inclure l\'état actif/inactif des articles'
                                  : 'Include active/inactive status of items'
                                }
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="capture_availability"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-sm">
                                {language === 'fr' ? 'Disponibilité des articles' : 'Item Availability'}
                              </FormLabel>
                              <FormDescription>
                                {language === 'fr' 
                                  ? 'Inclure la disponibilité disponible/indisponible'
                                  : 'Include available/unavailable availability status'
                                }
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="capture_pricing"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-sm">
                                {language === 'fr' ? 'Prix des articles' : 'Item Pricing'}
                                <Badge variant="secondary" className="ml-2 text-xs">
                                  {language === 'fr' ? 'Optionnel' : 'Optional'}
                                </Badge>
                              </FormLabel>
                              <FormDescription>
                                {language === 'fr' 
                                  ? 'Inclure les prix actuels (généralement non recommandé)'
                                  : 'Include current pricing (usually not recommended)'
                                }
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>

            <Separator />

            {/* Scheduling Options - Hide for manual presets */}
            {watchPresetType !== 'manual' && (
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-blue-600" />
                  <h3 className="text-sm font-medium">
                    {language === 'fr' ? 'Options de planification' : 'Scheduling Options'}
                  </h3>
                  <Badge variant="secondary" className="text-xs">
                    {language === 'fr' ? 'Optionnel' : 'Optional'}
                  </Badge>
                </div>

                <FormField
                  control={form.control}
                  name="enable_scheduling"
                  render={({ field }) => (
                    <FormItem className="flex items-center justify-between rounded-lg border p-4">
                      <div className="space-y-0.5">
                        <FormLabel className="text-base flex items-center gap-2">
                          <Clock className="h-4 w-4 text-blue-600" />
                          {language === 'fr' ? 'Activer la planification' : 'Enable Scheduling'}
                        </FormLabel>
                        <FormDescription>
                          {language === 'fr' 
                            ? 'Planifier l\'application automatique de ce preset'
                            : 'Schedule automatic application of this preset'
                          }
                        </FormDescription>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />

                {/* Recurring Schedule Option - For time-based presets */}
                {watchPresetType === 'time_based' && (
                  <FormField
                    control={form.control}
                    name="is_recurring"
                    render={({ field }) => (
                      <FormItem className="flex items-center justify-between rounded-lg border p-4 bg-blue-50/50">
                        <div className="space-y-0.5">
                          <FormLabel className="text-base flex items-center gap-2">
                            <Repeat className="h-4 w-4 text-blue-600" />
                            {language === 'fr' ? 'Planification récurrente' : 'Recurring Schedule'}
                          </FormLabel>
                          <FormDescription>
                            {language === 'fr' 
                              ? 'Activer ce preset automatiquement chaque jour'
                              : 'Activate this preset automatically every day'
                            }
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />
                )}

              {/* Scheduling Fields - Different options based on recurring vs one-time */}
              {watchEnableScheduling && (
                <div className="space-y-4 pl-4 border-l-2 border-blue-200">
                  
                  {/* Recurring Schedule Fields - For time-based with recurring enabled */}
                  {watchPresetType === 'time_based' && watchIsRecurring ? (
                    <>
                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="daily_start_time"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>
                                {language === 'fr' ? 'Heure de début' : 'Start Time'}
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  type="time"
                                  placeholder="06:00"
                                  {...field} 
                                />
                              </FormControl>
                              <FormDescription>
                                {language === 'fr' ? 'Chaque jour à' : 'Every day at'}
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="daily_end_time"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>
                                {language === 'fr' ? 'Heure de fin' : 'End Time'}
                              </FormLabel>
                              <FormControl>
                                <Input 
                                  type="time"
                                  placeholder="11:00"
                                  {...field} 
                                />
                              </FormControl>
                              <FormDescription>
                                {language === 'fr' ? 'Désactivé à' : 'Deactivated at'}
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      {/* Days of Week Selection */}
                      <FormField
                        control={form.control}
                        name="days_of_week"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              {language === 'fr' ? 'Jours de la semaine' : 'Days of Week'}
                            </FormLabel>
                            <div className="grid grid-cols-4 gap-2">
                              {[
                                { value: 'monday', label: language === 'fr' ? 'Lun' : 'Mon' },
                                { value: 'tuesday', label: language === 'fr' ? 'Mar' : 'Tue' },
                                { value: 'wednesday', label: language === 'fr' ? 'Mer' : 'Wed' },
                                { value: 'thursday', label: language === 'fr' ? 'Jeu' : 'Thu' },
                                { value: 'friday', label: language === 'fr' ? 'Ven' : 'Fri' },
                                { value: 'saturday', label: language === 'fr' ? 'Sam' : 'Sat' },
                                { value: 'sunday', label: language === 'fr' ? 'Dim' : 'Sun' },
                              ].map((day) => (
                                <Label
                                  key={day.value}
                                  className={`flex items-center justify-center p-2 rounded-md border cursor-pointer transition-colors ${
                                    field.value?.includes(day.value)
                                      ? 'bg-blue-100 border-blue-300 text-blue-900'
                                      : 'bg-background hover:bg-muted'
                                  }`}
                                  onClick={() => {
                                    const currentDays = field.value || []
                                    if (currentDays.includes(day.value)) {
                                      field.onChange(currentDays.filter(d => d !== day.value))
                                    } else {
                                      field.onChange([...currentDays, day.value])
                                    }
                                  }}
                                >
                                  <Checkbox
                                    checked={field.value?.includes(day.value) || false}
                                    className="sr-only"
                                  />
                                  <span className="text-xs font-medium">{day.label}</span>
                                </Label>
                              ))}
                            </div>
                            <FormDescription>
                              {language === 'fr' 
                                ? 'Sélectionnez les jours où ce preset sera actif'
                                : 'Select the days when this preset will be active'
                              }
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </>
                  ) : (
                    /* One-time Schedule Fields - For all non-recurring schedules */
                    <>
                      <FormField
                        control={form.control}
                        name="schedule_start"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              {language === 'fr' ? 'Date et heure de début' : 'Start Date & Time'}
                            </FormLabel>
                            <FormControl>
                              <Input 
                                type="datetime-local" 
                                min={minDateTime}
                                {...field} 
                              />
                            </FormControl>
                            <FormDescription>
                              {language === 'fr' 
                                ? 'Quand ce preset sera automatiquement appliqué'
                                : 'When this preset will be automatically applied'
                              }
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                  <FormField
                    control={form.control}
                    name="schedule_end"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>
                          {language === 'fr' ? 'Date et heure de fin' : 'End Date & Time'} 
                          <span className="text-muted-foreground ml-1">
                            ({language === 'fr' ? 'optionnel' : 'optional'})
                          </span>
                        </FormLabel>
                        <FormControl>
                          <Input 
                            type="datetime-local" 
                            min={form.watch('schedule_start') || minDateTime}
                            {...field} 
                          />
                        </FormControl>
                        <FormDescription>
                          {language === 'fr' 
                            ? 'Quand ce preset sera automatiquement désactivé'
                            : 'When this preset will be automatically deactivated'
                          }
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                    </>
                  )}
                </div>
              )}
            )}

            {/* Dynamic Information Banner based on preset type */}
            <div className="rounded-lg bg-blue-50 dark:bg-blue-900/20 p-4">
              <div className="flex gap-3">
                <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
                <div className="space-y-1">
                  <p className="text-sm font-medium text-blue-900 dark:text-blue-100">
                    {(() => {
                      switch (watchPresetType) {
                        case 'time_based':
                          return language === 'fr' ? 'Presets basés sur l\'heure' : 'Time-Based Presets'
                        case 'seasonal':
                          return language === 'fr' ? 'Presets saisonniers' : 'Seasonal Presets'
                        case 'special_event':
                          return language === 'fr' ? 'Presets d\'événements spéciaux' : 'Special Event Presets'
                        case 'manual':
                          return language === 'fr' ? 'Presets manuels' : 'Manual Presets'
                        default:
                          return language === 'fr' ? 'À propos des presets' : 'About Presets'
                      }
                    })()}
                  </p>
                  <p className="text-xs text-blue-700 dark:text-blue-200">
                    {(() => {
                      switch (watchPresetType) {
                        case 'time_based':
                          return language === 'fr'
                            ? 'Parfaits pour les menus petit-déjeuner, déjeuner et dîner. Peuvent s\'activer automatiquement à des heures spécifiques chaque jour.'
                            : 'Perfect for breakfast, lunch, and dinner menus. Can automatically activate at specific times each day.'
                        case 'seasonal':
                          return language === 'fr'
                            ? 'Idéals pour les changements de menu saisonniers comme les menus d\'été ou d\'hiver. Activation planifiée pour des périodes longues.'
                            : 'Ideal for seasonal menu changes like summer or winter menus. Scheduled activation for extended periods.'
                        case 'special_event':
                          return language === 'fr'
                            ? 'Conçus pour des occasions spéciales comme Noël, Saint-Valentin, ou des fêtes. Activation ponctuelle avec dates spécifiques.'
                            : 'Designed for special occasions like Christmas, Valentine\'s Day, or holidays. One-time activation with specific dates.'
                        case 'manual':
                          return language === 'fr'
                            ? 'Activation manuelle uniquement. Parfaits pour tester de nouveaux menus ou des changements temporaires sans planification automatique.'
                            : 'Manual activation only. Perfect for testing new menus or temporary changes without automatic scheduling.'
                        default:
                          return language === 'fr'
                            ? 'Les presets capturent l\'état complet de votre menu. Choisissez le type qui correspond le mieux à vos besoins opérationnels.'
                            : 'Presets capture the complete state of your menu. Choose the type that best fits your operational needs.'
                      }
                    })()}
                  </p>
                </div>
              </div>
            </div>

            <DialogFooter>
              <Button type="button" variant="outline" onClick={handleClose}>
                {language === 'fr' ? 'Annuler' : 'Cancel'}
              </Button>
              <Button type="submit" disabled={isCreating}>
                {isCreating ? (
                  <>
                    <Clock className="h-4 w-4 mr-2 animate-spin" />
                    {language === 'fr' ? 'Création...' : 'Creating...'}
                  </>
                ) : (
                  <>
                    <Settings className="h-4 w-4 mr-2" />
                    {language === 'fr' ? 'Créer le preset' : 'Create Preset'}
                  </>
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}